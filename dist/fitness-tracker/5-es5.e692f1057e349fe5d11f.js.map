{"version":3,"sources":["webpack:///src/app/training/new-training/new-training.component.html","webpack:///src/app/training/new-training/new-training.component.ts","webpack:///src/app/training/past-trainings/past-trainings.component.html","webpack:///src/app/training/past-trainings/past-trainings.component.ts","webpack:///src/app/training/current-training/stop-training.component.ts","webpack:///src/app/training/current-training/current-training.component.html","webpack:///src/app/training/current-training/current-training.component.ts","webpack:///src/app/training/training.component.html","webpack:///src/app/training/training-routing.module.ts","webpack:///src/app/training/training.component.ts","webpack:///src/app/training/training.module.ts"],"names":["NewTrainingComponent","trainingService","store","this","isLoading$","select","trainingSub","exercisesChanged","subscribe","exercises","trainingExercises","fetchExercises","unsubscribe","form","value","exercise","currentExercise","find","name","startExercise","window","alert","fetchAvailableExercises","onStartTraining","PastTrainingsComponent","StopTrainingComponent","displayedColumns","dataSource","exerciseHistoryChangedSub","exerciseHistoryChanged","data","fetchExerciseHistory","sort","paginator","filterValue","filter","trim","toLowerCase","doFilter","passedData","CurrentTrainingComponent","dialog","motivationalMessages","id","spinnerProgress","currentMotivationalMessageId","timerStarted","getCurrentExercise","time","duration","interval","startTimer","timer","setInterval","Math","round","clearInterval","exerciseComplete","open","timeLeft","afterClosed","quitTraining","quitUnfinishedExercise","finishCurrentExercise","TrainingComponent","TrainingRoutingModule","TrainingModule","routes","path","component","trainingSessionActive","exerciseSub","exerciseToggled","exerciseSelected","forChild"],"mappings":"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","file":"x","sourcesContent":["<section fxLayout fxLayoutAlign=\"center\" class=\"new-training\">\n    <form (ngSubmit)=\"onStartTraining(form)\" #form=\"ngForm\">\n        <mat-card\n            fxLayout=\"column\"\n            fxFlex\n            fxFlex.gt-xs=\"600px\"\n            fxLayoutAlign=\"center center\"\n        >\n            <mat-card-title>Choose a workout!</mat-card-title>\n            <mat-card-content>\n                <mat-spinner *ngIf=\"isLoading$ | async\"></mat-spinner>\n                <mat-form-field\n                    *ngIf=\"!(isLoading$ | async) && trainingExercises\"\n                >\n                    <mat-label>Select type of training</mat-label>\n                    <mat-select ngModel name=\"exercise\">\n                        <mat-option\n                            *ngFor=\"let exercise of trainingExercises\"\n                            [value]=\"exercise.name\"\n                        >\n                            {{ exercise.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </mat-card-content>\n            <mat-card-actions>\n                <button *ngIf=\"trainingExercises\" type=\"submit\" mat-button>\n                    Start\n                </button>\n                <button\n                    *ngIf=\"!trainingExercises\"\n                    mat-raised-button\n                    type=\"button\"\n                    (click)=\"fetchExercises()\"\n                >\n                    Reload Resources\n                </button>\n            </mat-card-actions>\n        </mat-card>\n    </form>\n</section>\n","import { UIService } from './../../shared/ui.service';\nimport { Exercise } from './../exercise.model';\nimport { TrainingService } from './../training.service';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Subscription, Observable } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport * as fromRoot from '../../app.reducer';\n\n@Component({\n    selector: 'app-new-training',\n    templateUrl: './new-training.component.html',\n    styleUrls: ['./new-training.component.css'],\n})\nexport class NewTrainingComponent implements OnInit, OnDestroy {\n    trainingExercises: Exercise[];\n    private trainingSub: Subscription;\n    isLoading: boolean;\n    isLoading$: Observable<boolean>;\n\n    constructor(\n        private trainingService: TrainingService,\n        private store: Store<fromRoot.State>\n    ) {}\n\n    ngOnInit(): void {\n        this.isLoading$ = this.store.select(fromRoot.getIsLoading);\n        this.trainingSub = this.trainingService.exercisesChanged.subscribe(\n            (exercises) => {\n                this.trainingExercises = exercises;\n            }\n        );\n        this.fetchExercises();\n    }\n\n    ngOnDestroy() {\n        if (this.trainingSub) {\n            this.trainingSub.unsubscribe();\n        }\n    }\n\n    onStartTraining(form: NgForm) {\n        if (!form.value.exercise) {\n            window.alert('Please choose a workout!');\n            return;\n        }\n        const currentExercise = this.trainingExercises.find((exercise) => {\n            return exercise.name === form.value.exercise;\n        });\n\n        this.trainingService.startExercise(currentExercise);\n    }\n\n    fetchExercises() {\n        this.trainingService.fetchAvailableExercises();\n    }\n}\n","<div fxLayoutAlign=\"center center\">\n  <mat-form-field fxFlex=\"60%\" fxFlex.gt-xs=\"30%\">\n    <input\n      type=\"text\"\n      matInput\n      (keyup)=\"doFilter($event.target.value)\"\n      placeholder=\"Filter\"\n    />\n  </mat-form-field>\n</div>\n\n<mat-table [dataSource]=\"dataSource\" matSort>\n  <ng-container matColumnDef=\"date\">\n    <mat-header-cell *matHeaderCellDef mat-sort-header>Date</mat-header-cell>\n    <mat-cell *matCellDef=\"let element\">{{\n      element.date.seconds * 1000 | date\n    }}</mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"name\">\n    <mat-header-cell *matHeaderCellDef mat-sort-header>Name</mat-header-cell>\n    <mat-cell *matCellDef=\"let element\">{{ element.name }}</mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"calories\">\n    <mat-header-cell *matHeaderCellDef mat-sort-header\n      >Calories</mat-header-cell\n    >\n    <mat-cell *matCellDef=\"let element\">{{\n      element.calories | number\n    }}</mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"duration\">\n    <mat-header-cell *matHeaderCellDef mat-sort-header\n      >Duration (Seconds)</mat-header-cell\n    >\n    <mat-cell *matCellDef=\"let element\">{{\n      element.duration | number\n    }}</mat-cell>\n  </ng-container>\n\n  <ng-container matColumnDef=\"state\">\n    <mat-header-cell *matHeaderCellDef mat-sort-header>State</mat-header-cell>\n    <mat-cell *matCellDef=\"let element\">{{ element.state }}</mat-cell>\n  </ng-container>\n\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n  <mat-row *matRowDef=\"let row; columns: displayedColumns\"></mat-row>\n</mat-table>\n\n<mat-paginator [pageSize]=\"1\" [pageSizeOptions]=\"[1, 5, 10, 25]\">\n</mat-paginator>\n","import { Subscription } from \"rxjs\";\nimport { Exercise } from \"./../exercise.model\";\nimport { TrainingService } from \"./../training.service\";\nimport {\n  Component,\n  OnInit,\n  ViewChild,\n  AfterViewInit,\n  OnDestroy,\n} from \"@angular/core\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { MatPaginator } from \"@angular/material/paginator\";\n\n@Component({\n  selector: \"app-past-trainings\",\n  templateUrl: \"./past-trainings.component.html\",\n  styleUrls: [\"./past-trainings.component.css\"],\n})\nexport class PastTrainingsComponent\n  implements OnInit, AfterViewInit, OnDestroy {\n  displayedColumns = [\"date\", \"name\", \"calories\", \"duration\", \"state\"];\n  dataSource = new MatTableDataSource<Exercise>();\n  exerciseHistoryChangedSub: Subscription;\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  constructor(private trainingService: TrainingService) {}\n\n  ngOnInit(): void {\n    this.exerciseHistoryChangedSub = this.trainingService.exerciseHistoryChanged.subscribe(\n      (exercises) => {\n        this.dataSource.data = exercises;\n      }\n    );\n    this.trainingService.fetchExerciseHistory();\n  }\n\n  ngOnDestroy(): void {\n    if (this.exerciseHistoryChangedSub) {\n      this.exerciseHistoryChangedSub.unsubscribe();\n    }\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n  }\n\n  doFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n}\n","import { Component, Inject } from \"@angular/core\";\nimport { MAT_DIALOG_DATA } from \"@angular/material/dialog\";\n\n@Component({\n  selector: \"app-stop-training\",\n  template: `\n    <h1 mat-dialog-title>Would you like to continue?</h1>\n    <mat-dialog-content>\n      <p>You got {{ passedData.timeLeft }} seconds left</p>\n    </mat-dialog-content>\n    <mat-dialog-actions>\n      <button mat-button [mat-dialog-close]=\"false\">Continue</button>\n      <button mat-button [mat-dialog-close]=\"true\">Quit</button>\n    </mat-dialog-actions>\n  `,\n})\nexport class StopTrainingComponent {\n  constructor(@Inject(MAT_DIALOG_DATA) public passedData: any) {}\n}\n","<section\n  class=\"current-training\"\n  fxLayout=\"column\"\n  fxLayoutAlign=\"center center\"\n>\n  <h1>Okay, let's get those {{ currentExercise?.name }} going!</h1>\n  <mat-progress-spinner\n    mode=\"determinate\"\n    [value]=\"spinnerProgress\"\n  ></mat-progress-spinner>\n  <h1 *ngIf=\"time\">{{ time }} seconds to go!</h1>\n  <p>\n    {{ motivationalMessages[currentMotivationalMessageId]?.name }}\n  </p>\n  <button\n    *ngIf=\"timerStarted\"\n    mat-raised-button\n    color=\"accent\"\n    (click)=\"pauseTimer()\"\n  >\n    Pause\n  </button>\n  <div *ngIf=\"!timerStarted\">\n    <button mat-raised-button color=\"accent\" (click)=\"restartTimer()\">\n      Go Again!\n    </button>\n    <button mat-raised-button color=\"warn\" (click)=\"finishCurrentTraining()\">\n      Exit\n    </button>\n  </div>\n</section>\n","import { Exercise } from \"./../exercise.model\";\nimport { TrainingService } from \"./../training.service\";\nimport { Component, OnInit } from \"@angular/core\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { StopTrainingComponent } from \"./stop-training.component\";\n\n@Component({\n  selector: \"app-current-training\",\n  templateUrl: \"./current-training.component.html\",\n  styleUrls: [\"./current-training.component.css\"],\n})\nexport class CurrentTrainingComponent implements OnInit {\n  currentExercise: Exercise;\n\n  motivationalMessages = [\n    { name: \"Lets go!\", id: 0 },\n    { name: \"Keep on going, you've got this!\", id: 1 },\n    { name: \"Awesome, you made it!\", id: 2 },\n  ];\n\n  time: number;\n  exerciseLength: number;\n  interval: number;\n  spinnerProgress = 100;\n  currentMotivationalMessageId = 0;\n  timer: number;\n  timerStarted = false;\n\n  constructor(\n    private dialog: MatDialog,\n    private trainingService: TrainingService\n  ) {}\n\n  ngOnInit(): void {\n    this.currentExercise = this.trainingService.getCurrentExercise();\n    this.time = this.currentExercise.duration;\n    this.interval = 100 / this.time;\n    this.startTimer();\n  }\n\n  startTimer() {\n    if (this.time === this.currentExercise.duration) {\n      this.currentMotivationalMessageId = 0;\n    }\n    this.timerStarted = true;\n    this.timer = window.setInterval(() => {\n      if (this.time > 1) {\n        if (this.time === Math.round(this.currentExercise.duration / 2)) {\n          this.currentMotivationalMessageId = 1;\n        }\n        this.time -= 1;\n        this.spinnerProgress -= this.interval;\n      } else {\n        this.currentMotivationalMessageId = 2;\n        clearInterval(this.timer);\n        this.spinnerProgress = 100;\n        this.time = this.currentExercise.duration;\n        this.timerStarted = false;\n        this.trainingService.exerciseComplete();\n      }\n    }, 1000);\n  }\n\n  pauseTimer() {\n    clearInterval(this.timer);\n    const dialogRef = this.dialog.open(StopTrainingComponent, {\n      data: {\n        timeLeft: this.time,\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((quitTraining) => {\n      if (quitTraining) {\n        this.trainingService.quitUnfinishedExercise(this.time);\n        this.time = 100;\n        this.currentMotivationalMessageId = 0;\n      } else {\n        this.startTimer();\n      }\n    });\n  }\n\n  restartTimer() {\n    if (!this.time) {\n      this.time = 100;\n    }\n    this.startTimer();\n  }\n\n  finishCurrentTraining() {\n    this.trainingService.finishCurrentExercise();\n  }\n}\n","<mat-tab-group *ngIf=\"!trainingSessionActive\">\n  <mat-tab label=\"New Exercise\">\n    <app-new-training></app-new-training>\n  </mat-tab>\n  <mat-tab label=\"Past Exercises\">\n    <app-past-trainings></app-past-trainings>\n  </mat-tab>\n</mat-tab-group>\n<app-current-training *ngIf=\"trainingSessionActive\"></app-current-training>\n","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\nimport { TrainingComponent } from \"./training.component\";\n\nconst routes: Routes = [{ path: \"\", component: TrainingComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TrainingRoutingModule {}\n","import { TrainingService } from \"./training.service\";\nimport { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { Exercise } from \"./exercise.model\";\nimport { Subscription } from \"rxjs\";\n\n@Component({\n  selector: \"app-training\",\n  templateUrl: \"./training.component.html\",\n  styleUrls: [\"./training.component.css\"],\n})\nexport class TrainingComponent implements OnInit, OnDestroy {\n  trainingSessionActive = false;\n  currentExercise: Exercise;\n  exerciseSub: Subscription;\n\n  constructor(private trainingService: TrainingService) {}\n\n  ngOnInit(): void {\n    this.exerciseSub = this.trainingService.exerciseToggled.subscribe(\n      (exerciseSelected) => {\n        if (exerciseSelected) {\n          this.trainingSessionActive = true;\n          this.currentExercise = exerciseSelected;\n        } else {\n          this.trainingSessionActive = false;\n        }\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.exerciseSub) {\n      this.exerciseSub.unsubscribe();\n    }\n  }\n}\n","import { TrainingRoutingModule } from \"./training-routing.module\";\nimport { SharedModule } from \"./../shared/shared.module\";\nimport { NgModule } from \"@angular/core\";\n\nimport { TrainingComponent } from \"./training.component\";\nimport { CurrentTrainingComponent } from \"./current-training/current-training.component\";\nimport { NewTrainingComponent } from \"./new-training/new-training.component\";\nimport { PastTrainingsComponent } from \"./past-trainings/past-trainings.component\";\nimport { StopTrainingComponent } from \"./current-training/stop-training.component\";\n\n@NgModule({\n  declarations: [\n    TrainingComponent,\n    CurrentTrainingComponent,\n    NewTrainingComponent,\n    PastTrainingsComponent,\n    StopTrainingComponent,\n  ],\n  imports: [SharedModule, TrainingRoutingModule],\n  exports: [],\n  entryComponents: [StopTrainingComponent],\n})\nexport class TrainingModule {}\n"]}